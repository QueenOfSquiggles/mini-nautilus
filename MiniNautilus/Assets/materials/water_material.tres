[gd_resource type="ShaderMaterial" load_steps=3 format=2]

[ext_resource path="res://Unorganized/textures/water/aerial_rocks_04_nor_gl_2k.jpg" type="Texture" id=1]

[sub_resource type="Shader" id=8]
code = "// NOTE: Shader automatically converted from Godot Engine 3.4.2.stable's SpatialMaterial.

shader_type spatial;
render_mode blend_mix,depth_draw_always,cull_disabled,diffuse_burley,specular_schlick_ggx;
uniform vec4 albedo : hint_color;
uniform sampler2D texture_albedo : hint_albedo;
uniform float specular;
uniform float metallic;
uniform float proximity_fade_distance;
uniform float roughness : hint_range(0,1);
uniform float point_size : hint_range(0,128);
uniform sampler2D texture_refraction;
uniform float refraction : hint_range(-16,16);
uniform vec4 refraction_texture_channel;
uniform sampler2D texture_normal : hint_normal;
uniform float normal_scale : hint_range(-16,16);
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;


void vertex() {
	UV=UV*uv1_scale.xy+uv1_offset.xy;
}




void fragment() {
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	METALLIC = metallic;
	ROUGHNESS = roughness;
	SPECULAR = specular;
	
	const float timescale_x = 0.01f;
	const float timescale_y = 0.005f;
	vec2 x_axis_factor = vec2(0.01,0.01) * TIME;
	vec2 y_axis_factor = vec2(0.01,-0.01) * TIME;
	
	vec3 x_axis_normal = texture(texture_normal,vec2(base_uv.x + x_axis_factor.x, base_uv.y + x_axis_factor.y)).rgb * texture(texture_normal,vec2(base_uv.x - x_axis_factor.x, base_uv.y - x_axis_factor.y)).rgb ;
	vec3 y_axis_normal = texture(texture_normal,vec2(base_uv.x + y_axis_factor.x, base_uv.y + y_axis_factor.y)).rgb * texture(texture_normal,vec2(base_uv.x - y_axis_factor.x, base_uv.y - y_axis_factor.y)).rgb;
	NORMALMAP = (x_axis_normal + y_axis_normal) / 2.0f;
	
	
	NORMALMAP_DEPTH = normal_scale;
	vec3 unpacked_normal = NORMALMAP;
	unpacked_normal.xy = unpacked_normal.xy * 2.0 - 1.0;
	unpacked_normal.z = sqrt(max(0.0, 1.0 - dot(unpacked_normal.xy, unpacked_normal.xy)));
	vec3 ref_normal = normalize( mix(NORMAL,TANGENT * unpacked_normal.x + BINORMAL * unpacked_normal.y + NORMAL * unpacked_normal.z,NORMALMAP_DEPTH) );
	vec2 ref_ofs = SCREEN_UV - ref_normal.xy * dot(texture(texture_refraction,base_uv),refraction_texture_channel) * refraction;
	float ref_amount = 1.0 - albedo.a * albedo_tex.a;
	EMISSION += textureLod(SCREEN_TEXTURE,ref_ofs,ROUGHNESS * 8.0).rgb * ref_amount;
	ALBEDO *= 1.0 - ref_amount;
	ALPHA = 1.0;
	float depth_tex = textureLod(DEPTH_TEXTURE,SCREEN_UV,0.0).r;
	vec4 world_pos = INV_PROJECTION_MATRIX * vec4(SCREEN_UV*2.0-1.0,depth_tex*2.0-1.0,1.0);
	world_pos.xyz/=world_pos.w;
	ALPHA*=clamp(1.0-smoothstep(world_pos.z+proximity_fade_distance,world_pos.z,VERTEX.z),0.0,1.0);
}
"

[resource]
shader = SubResource( 8 )
shader_param/albedo = Color( 0.105882, 0.47451, 0.870588, 0.462745 )
shader_param/specular = 1.0
shader_param/metallic = 0.0
shader_param/proximity_fade_distance = 2.0
shader_param/roughness = 0.5
shader_param/point_size = 1.0
shader_param/refraction = 0.1
shader_param/refraction_texture_channel = Plane( 0.333333, 0.333333, 0.333333, 0 )
shader_param/normal_scale = 1.0
shader_param/uv1_scale = Vector3( 1, 1, 1 )
shader_param/uv1_offset = Vector3( 0, 0, 0 )
shader_param/uv2_scale = Vector3( 1, 1, 1 )
shader_param/uv2_offset = Vector3( 0, 0, 0 )
shader_param/texture_refraction = ExtResource( 1 )
shader_param/texture_normal = ExtResource( 1 )
